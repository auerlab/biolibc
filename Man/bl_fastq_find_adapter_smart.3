\" Generated by c2man from bl_fastq_find_adapter_smart.c
.TH bl_fastq_find_adapter_smart 3

.SH LIBRARY
\" Indicate #includes, library name, -L and -l flags
.nf
.na
#include <biolibc/fastq.h>
-lbiolibc -lxtend
.ad
.fi

\" Convention:
\" Underline anything that is typed verbatim - commands, etc.
.SH SYNOPSIS
.PP
size_t  bl_fastq_find_adapter_smart(const bl_fastq_t *read,
const char *adapter, size_t min_match,
unsigned max_mismatch_percent)

.SH ARGUMENTS
.nf
.na
read        FASTQ read to be searched
adapter     Adapter sequence to be located
min_match   Minimum number of characters to match in adapter
max_mismatch_percent    Maximum percent of unequal bases in overlap
.ad
.fi

.SH DESCRIPTION

Locate adapter (or a portion thereof if the end of the read is
reached) in a FASTQ sequence.

The content of adapter is assumed to be all upper case.  This
improves speed by avoiding millions of redundant toupper()
conversions on the same string.  Use strlupper(3) or strupper(3)
before calling this function if necessary.

A minimum of min_match bases must match between the adapter and
the read.  This mainly matters near the end of a read, where
remaining bases are fewer than the length of the adapter.

A maximum of max_mismatch_percent mismatched bases are tolerated
to allow for read errors in the adapter, which do happen, albeit
rarely.  This is taken as a percent of the adapter length, or the
remaining bases in the sequence, whichever is smaller.
Note that the NUMBER of mismatched bases tolerated is
truncated from the percent calculation.  E.g. using 10% tolerance,
0 mismatched base is tolerated among 9 total bases, 1 among 10.

Higher values of max_mismatch_percent will results in slightly
longer run times, more adapters detected, and a higher risk of
false-positives (falsely identifying natural sequences as adapters).

Indels (insertions and deletions) are not currently handled.

Note that adapter matching is not an exact science.  We cannot remove
every adapter without also removing many natural sequences, since
it is impossible to know whether any given sequence is really an
adapter or naturally occurring.  The best we can do is guestimate
what will remove the most adapters and fewest natural sequences.
It is also not usually important to remove every adapter, but only to
minimize adapter contamination.  Failing to align a small percentage
of sequences due to adapter contamination will not change the story
told by the downstream analysis.  Nor will erroneously trimming off
the 3' end of a small percentage of reads containing natural
sequences resembling adapters.  Just trimming exact matches of
the adapter sequence will generally remove 99% or more of the
adapter contamination and minimize false-positives.  Tolerating
1 or 2 differences has been shown to do slightly better overall.

.SH RETURN VALUES

Index of adapter sequence if found, index of null terminator otherwise

.SH EXAMPLES
.nf
.na

bl_fastq_t  read;
char        *adapter;
size_t      index;

index = bl_fastq_find_adapter_smart(&read, adapter, 3, 10);
if ( BL_FASTQ_SEQ_AE(&read, index) != '0' )
    bl_fastq_3p_trim(&read, index);
.ad
.fi

.SH SEE ALSO

bl_fastq_find_adapter_exact(3), bl_fastq_3p_trim(3)

